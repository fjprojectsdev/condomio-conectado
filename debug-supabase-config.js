import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://ddzmibbhtjrgzdgflujg.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkem1pYmJodGpyZ3pkZ2ZsdWpnIiwicm9sZUludGVuZGVkVGVtcGxhdGUiOiJhbm9uIiwiaWF0IjoxNzU0NDQ3NDQ1LCJleHAiOjIwNzAwMjM0NDV9.lB6bQ--g86TIwDkvo6n-pOKONsNYfxMTBvZUH-fBvNk";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function debugSupabaseConfig() {
  console.log('üîç DIAGN√ìSTICO COMPLETO - SUPABASE AUTH\n');
  
  // 1. Testar conectividade b√°sica
  console.log('1Ô∏è‚É£ TESTE DE CONECTIVIDADE');
  try {
    const { data: { user } } = await supabase.auth.getUser();
    console.log('‚úÖ Conectividade com Supabase: OK');
    console.log('üë§ Usu√°rio atual:', user ? user.email : 'Nenhum');
  } catch (err) {
    console.log('‚ùå Erro de conectividade:', err.message);
  }
  
  // 2. Tentar cadastro com diferentes configura√ß√µes
  console.log('\n2Ô∏è‚É£ TESTE DE CADASTRO DIRETO');
  const testEmail = `debug${Date.now()}@teste.com`;
  
  try {
    console.log(`üìß Testando cadastro: ${testEmail}`);
    
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: '123456',
      options: {
        emailRedirectTo: undefined, // Sem redirect
        data: {} // Sem metadata extra
      }
    });

    if (error) {
      console.log('‚ùå ERRO DETALHADO:', error);
      console.log('   Status:', error.status);
      console.log('   C√≥digo:', error.code || 'N/A');
      console.log('   Mensagem:', error.message);
      
      // Analisar tipo de erro
      if (error.message.includes('Email signups are disabled')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Cadastros por email DESABILITADOS');
        console.log('üí° SOLU√á√ÉO:');
        console.log('   1. V√° para: https://supabase.com/dashboard/project/ddzmibbhtjrgzdgflujg/auth/settings');
        console.log('   2. Na se√ß√£o "User Signups", HABILITE "Allow new users to sign up"');
        console.log('   3. Salve as configura√ß√µes');
        
      } else if (error.message.includes('Database error')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Erro no banco de dados (trigger)');
        console.log('üí° SOLU√á√ÉO:');
        console.log('   1. Execute o SQL de corre√ß√£o no Supabase SQL Editor');
        console.log('   2. Ou desabilite RLS temporariamente');
        
      } else if (error.message.includes('confirmation')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Problema na confirma√ß√£o de email');
        console.log('üí° SOLU√á√ÉO:');
        console.log('   1. Configure confirma√ß√£o de email corretamente');
        console.log('   2. Ou desabilite temporariamente');
      }
      
    } else {
      console.log('‚úÖ CADASTRO FUNCIONOU!');
      console.log('üë§ Usu√°rio criado:', data.user?.id);
      console.log('üìß Email:', data.user?.email);
      console.log('‚úâÔ∏è Confirma√ß√£o necess√°ria:', data.user?.email_confirmed_at ? 'N√£o' : 'Sim');
    }
    
  } catch (err) {
    console.log('üí• Erro inesperado:', err.message);
  }
  
  // 3. Verificar configura√ß√µes de autentica√ß√£o
  console.log('\n3Ô∏è‚É£ VERIFICA√á√ÉO DE CONFIGURA√á√ïES');
  
  try {
    // Tentar acessar algumas configura√ß√µes via API
    const { data: session } = await supabase.auth.getSession();
    console.log('‚úÖ Sess√£o atual:', session.session ? 'Ativa' : 'Inativa');
    
  } catch (err) {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar sess√£o:', err.message);
  }
  
  // 4. Testar acesso √†s tabelas
  console.log('\n4Ô∏è‚É£ TESTE DE ACESSO √ÄS TABELAS');
  
  const tables = ['profiles', 'user_roles'];
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          console.log(`   üí° Tabela ${table} n√£o existe - execute SQL para criar`);
        }
      } else {
        console.log(`‚úÖ ${table}: Acess√≠vel`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: ${err.message}`);
    }
  }
  
  console.log('\nüìã RESUMO DO DIAGN√ìSTICO:');
  console.log('================================');
  console.log('‚úÖ Execute as solu√ß√µes indicadas acima');
  console.log('üîÑ Depois execute este teste novamente');
  console.log('üìû Se persistir, h√° problema de configura√ß√£o no Dashboard');
}

debugSupabaseConfig();
