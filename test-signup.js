import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://ddzmibbhtjrgzdgflujg.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkem1pYmJodGpyZ3pkZ2ZsdWpnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NDc0NDUsImV4cCI6MjA3MDAyMzQ0NX0.lB6bQ--g86TIwDkvo6n-pOKONsNYfxMTBvZUH-fBvNk";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testSignup() {
  console.log('üß™ Testando cadastro de usu√°rio...\n');

  // Email de teste √∫nico
  const testEmail = `teste${Date.now()}@example.com`;
  const testPassword = '123456789';

  console.log(`üìß Email de teste: ${testEmail}`);
  console.log(`üîë Senha de teste: ${testPassword}\n`);

  try {
    console.log('1Ô∏è‚É£ Tentando realizar signup...');
    
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
    });

    if (error) {
      console.error('‚ùå Erro no signup:', error);
      console.error('   - C√≥digo:', error.status || 'N/A');
      console.error('   - Mensagem:', error.message);
      console.error('   - Detalhes:', JSON.stringify(error, null, 2));
      
      // Diagnosticar poss√≠veis causas
      console.log('\nüîç Poss√≠veis causas:');
      
      if (error.message.includes('database')) {
        console.log('   ‚ùå Problema no banco de dados');
        console.log('   üí° Solu√ß√£o: Execute o script debug-database.sql');
      }
      
      if (error.message.includes('trigger')) {
        console.log('   ‚ùå Problema no trigger handle_new_user');
        console.log('   üí° Solu√ß√£o: Verifique se a fun√ß√£o existe e est√° correta');
      }
      
      if (error.message.includes('policy')) {
        console.log('   ‚ùå Problema nas pol√≠ticas RLS');
        console.log('   üí° Solu√ß√£o: Desabilite temporariamente RLS para teste');
      }
      
      if (error.message.includes('confirmation')) {
        console.log('   ‚ùå Problema na confirma√ß√£o de email');
        console.log('   üí° Solu√ß√£o: Desabilite confirma√ß√£o no Dashboard Supabase');
      }
      
      return;
    }

    console.log('‚úÖ Signup realizado com sucesso!');
    console.log('üë§ Usu√°rio:', data.user?.id);
    console.log('üìß Email:', data.user?.email);
    console.log('‚úâÔ∏è Email confirmado:', data.user?.email_confirmed_at ? 'Sim' : 'N√£o');
    
    // Verificar se as tabelas foram populadas
    console.log('\n2Ô∏è‚É£ Verificando se dados foram criados...');
    
    // Verificar profiles
    try {
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', data.user.id)
        .single();
      
      if (profileError) {
        console.log('‚ùå Erro ao buscar profile:', profileError.message);
      } else if (profileData) {
        console.log('‚úÖ Profile criado:', profileData.email);
      } else {
        console.log('‚ùå Profile n√£o encontrado');
      }
    } catch (err) {
      console.log('‚ùå Erro no profile:', err.message);
    }
    
    // Verificar user_roles
    try {
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .select('*')
        .eq('user_id', data.user.id)
        .single();
      
      if (roleError) {
        console.log('‚ùå Erro ao buscar role:', roleError.message);
      } else if (roleData) {
        console.log('‚úÖ Role criado:', roleData.role);
      } else {
        console.log('‚ùå Role n√£o encontrado');
      }
    } catch (err) {
      console.log('‚ùå Erro no role:', err.message);
    }

  } catch (err) {
    console.error('üí• Erro inesperado:', err);
  }
}

async function testDatabaseConnectivity() {
  console.log('üîå Testando conectividade com o banco...\n');
  
  try {
    // Teste simples de conex√£o
    const { data, error } = await supabase
      .from('profiles')
      .select('count(*)', { count: 'exact' });
    
    if (error) {
      console.log('‚ùå Erro de conectividade:', error.message);
    } else {
      console.log('‚úÖ Conectividade OK - Profiles encontrados:', data.length);
    }
    
    // Testar user_roles
    const { data: rolesData, error: rolesError } = await supabase
      .from('user_roles')
      .select('count(*)', { count: 'exact' });
    
    if (rolesError) {
      console.log('‚ùå Erro user_roles:', rolesError.message);
    } else {
      console.log('‚úÖ User_roles OK - Registros encontrados:', rolesData.length);
    }
    
  } catch (err) {
    console.log('‚ùå Erro de conectividade:', err.message);
  }
}

async function main() {
  console.log('üöÄ Teste de Cadastro - Condom√≠nio Conectado\n');
  
  await testDatabaseConnectivity();
  console.log('\n' + '='.repeat(50) + '\n');
  await testSignup();
  
  console.log('\nüìù Pr√≥ximos passos se houve erro:');
  console.log('1. Execute debug-database.sql no Supabase SQL Editor');
  console.log('2. Verifique Authentication > Settings no Dashboard');
  console.log('3. Se necess√°rio, desabilite temporariamente email confirmation');
  console.log('4. Execute este teste novamente');
}

main().catch(console.error);
